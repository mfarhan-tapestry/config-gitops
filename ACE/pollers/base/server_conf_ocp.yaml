apiVersion: appconnect.ibm.com/v1beta1
kind: Configuration
metadata:
  name: pollers-serverconf
  namespace: int
spec:
  contents: ---
# ACE Integration Server configuration file
#
# General notes :
#  - Integration Server will load server.conf.yaml from directory set via --work-dir
#  - To ensure valid YAML avoid any use of TAB characters
#  - File paths may be taken as absolute, or relative to the integration server's work directory
#
# WARNING: Any value specified in the 'overrides/server.conf.yaml' will override values here
#
serverConfVersion: 1

#lilPath: ''                 # A list of paths from where User-defined node LIL/JAR files are loaded. (multiple directories are separated by platform path separator)

#deployMode: 'replace'       # Deploy mode: replace | none | manual

#defaultQueueManager: ''     # Set non-empty string to specify a default queue manager
#mqTrustedQueueManager: 'no' # Set to yes to enable MQ communication as a trusted (fastpath) application

#trace: 'none'               # choose 1 of : none|service|diagnostic
#traceSize: '1G'             # Set the service trace size
#traceNodeLevel: true        # Enable or disable Trace Nodes

#forceServerHTTPS: true      # force HTTPS on all HTTP/SOAP input nodes

Log:
  #consoleLog: true          # Control writing BIP messages to standard out. Set to true or false, default is true.
  #outputFormat: 'text'      # Set the format for writing BIP messages ibmjson or text, default is text.
  #eventLog: ''              # Control writing BIP messages to file. Set to '/path/log.txt' to enable, or '' to disable.
                             # Default is <workdir>/log/integration_server.<server_name>.events.txt

RestAdminListener:
  #port: 7600                # Set the Admin REST API Port for ACE Web UI and Toolkit or -1 to disable. Defaults to 7600.

  # Note the Admin REST API will be insecure without the following being set
  #host: 'localhost'         # Set the hostname otherwise we bind to the unspecified address

  # SSL Server auth
  #sslCertificate: '/path/to/serverPKCS.p12'  # See comment below
  #sslPassword: 'adminRestApi::sslpwd'        # See comment below

  # If using a pem certificate:
    # sslCertificate is the full path to the server certificate key
    # sslPassword is the full path to the server private key, which must be a standard private key and not an encrypted one
    # The file names must end with '.pem'
  # If using p12/pfx certificate:
    # sslCertificate is the full path to the server certificate store file
    # sslPassword is the passphrase or alias to the passphrase of the certificate store

  # SSL Client auth
  #requireClientCert: true                    # Request a certificate from the client
  #caPath: '/path/to/CA/certificates'         # CA certs, all files at this path will be read

  # Admin Security
  #  Authentication
  #basicAuth: true                                                    # Clients web user name and password will be authenticated when set true
  #ldapUrl: ldap[s]://server[:port]/baseDN[?[uid_attr][?[base|sub]]]  # ldap search url
  #ldapBindDn: ldap::adminAuthentication                              # Resource alias
  #ldapBindPassword: ldap::adminAuthentication                        # Resource alias
  #  Authorization
  #adminSecurity: 'inactive'                  # Used to enable Authorization. Clients web user role will be authorized when set active
  #authMode: 'file'                           # Set admin authorization mode to file

Security:
  Permissions:
    # Set Admin Security Authorization file permissions by web user role using 'read+:write+:execute+' , or 'all+'
    # '+' grants permission, '-' denies permission
    # e.g. define the following web user roles 'viewRole' and 'adminRole'
    #viewRole:  'read+:write-:execute-'
    #adminRole: 'all+'
  DataPermissions:
    # Set Admin Security Authorization file permissions for Record and Replay web user role using 'read+:write+:execute+' , or 'all+'
    # '+' grants permission, '-' denies permission.  Record and Replay roles also require 'read+' permission to be defined
    # in the Permissions section above.
    # e.g. define the following web user roles 'dataViewer', 'dataReplayer' and 'adminRole'
    #dataViewer:  'read+:write-:execute-'
    #dataReplayer: 'read+:write-:execute+'
    #adminRole: 'all+'

Defaults:
  #defaultApplication: ''            # Name a default application under which independent resources will be placed
  #policyProject: 'DefaultPolicies'  # Name of the Policy project that will be used for unqualified Policy references, default is 'DefaultPolicies'
  Policies:
    # Set default policy names, optionally qualified with a policy project as {policy project}:name
    #HTTPConnector: ''           # Default HTTP connector policy
    #HTTPSConnector: ''          # Default HTTPS connector policy
    #monitoringProfile: ''       # Default Monitoring profile

Events:
  OperationalEvents: # Message flow and Resource statistics plus Workload management
    MQ:
      #policy: ''      # Specify a {policy project}:policy if not using  'defaultQueueManager'
      #enabled: false  # Set true or false, default false
      #format: ''      # Set string or none
    MQTT:
      #policy: ''      # Specify a {policy project}:policy
      #enabled: false  # Set true or false, default false
      #format: ''      # Set string or none
  BusinessEvents: # Business monitoring events
    MQ:
      #policy: ''      # Specify a {policy project}:policy if not using  'defaultQueueManager'
      #enabled: false  # Set true or false, default false
      #format: ''      # Set string or none
    MQTT:
      #policy: ''      # Specify a {policy project}:policy
      #enabled: false  # Set true or false, default false
      #format: ''      # Set string or none

Monitoring:
  MessageFlow:
    #publicationOn: 'inactive'         # choose 1 of : active|inactive, default inactive
                                       # Ensure Events.BusinessEvents.MQ|MQTT is set
    #eventFormat: 'MonitoringEventV2'  # choose 1 of : MonitoringEventV2|WMB

Statistics:
  # Application message flows will by default inherit Snapshot and Archive values set here
  Snapshot:
    #publicationOn: 'inactive'   # choose 1 of : active|inactive, default inactive
                                 # Also set Events.OperationalEvents.MQ|MQTT for outputFormat json,xml to be published to MQ/MQTT
    #accountingOrigin: 'none'    # choose 1 of : none|basic
    #nodeDataLevel: 'none'       # choose 1 of : none|basic|advanced
    #outputFormat: 'usertrace'   # comma separated list of : csv,bluemix,json,xml,usertrace
    #threadDataLevel: 'none'     # choose 1 of : none|basic
  Archive:
    #archivalOn: 'inactive'      # choose 1 of : active|inactive, default inactive
                                 # Also set Events.OperationalEvents.MQ|MQTT for outputFormat xml to be published to MQ/MQTT
    #accountingOrigin: 'none'    # choose 1 of : none|basic
    #majorInterval: 60           # Sets the interval in minutes at which archive statistics are published
    #nodeDataLevel: 'none'       # choose 1 of : none|basic|advanced
    #outputFormat: 'usertrace'   # comma separated list of : csv,xml,usertrace
    #threadDataLevel: 'none'     # choose 1 of : none|basic
  Resource:
    #outputFormat: ''            # comma separated list of : file,bluemix
    #reportingOn: false          # choose 1 of : true|false

UserExits:
  #activeUserExitList: ''        # Specify the name of an installed user exit to activate.
  #userExitPath: ''              # Specify the path or paths containing the user exists to be loaded. Multiple paths should be separated by colons on Unix and semi-colons on Windows.

BrokerRegistry:
  #brokerKeystoreType: 'JKS'
  #brokerKeystoreFile: ''
  #brokerKeystorePass: 'brokerKeystore::password'
  #brokerTruststoreType: 'JKS'
  #brokerTruststoreFile: ''
  #brokerTruststorePass: 'brokerTruststore::password'
  #brokerCRLFileList: ''
  #brokerEnableCRLDP: ''
  #allowSSLv3: ''
  #allowSNI: ''
  #reenableTransportAlgorithms: ''
  #reenableCertificateAlgorithms: ''
  #mqCCDT: ''
  #httpConnectorPortRange: ''
  #httpsConnectorPortRange: ''
  #brokerKerberosConfigFile: ''
  #brokerKerberosKeytabFile: ''
  #mqKeyRepository: ''

ResourceManagers:
  JVM:
    #jvmVerboseOption: 'none'
    #jvmDisableClassGC: ''
    #jvmEnableIncGC: ''
    #jvmShareClasses: ''
    #jvmNativeStackSize: -1
    #jvmJavaOSStackSize: -1
    #jvmMinHeapSize: 33554432        # minimum JVM  heap size in bytes (32MB)
    #jvmMaxHeapSize: 268435456       # maximum JVM heap size in bytes (256MB)
    jvmDebugPort: 8855                 # Set non-zero to activate JVM debug port for Toolkit debugging
    #jvmSystemProperty: ''
    #keystoreType: ''
    #keystoreFile: ''
    #keystorePass: ''
    truststoreType: 'PKCS12'
    truststoreFile: '/home/aceuser/truststores/es-cert.p12'
    truststorePass: 'ace-server::truststorePass'
    #crlFileList: ''
    #enableCRLDP: ''
    #kerberosConfigFile: ''
    #kerberosKeytabFile: ''

  HTTPConnector:
    #ListenerPort: 0              # Set non-zero to set a specific port, defaults to 7800
    #ListenerAddress: '0.0.0.0'   # Set the IP address for the listener to listen on. Default is to listen on all addresses
    #CORSEnabled: false           # Set the value to true to make the listener respond to valid HTTP CORS requests
    #CORSAllowOrigins: '*'
    #CORSAllowCredentials: false
    #CORSExposeHeaders: 'Content-Type'
    #CORSMaxAge: -1
    #CORSAllowMethods: 'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS'
    #CORSAllowHeaders: 'Accept,Accept-Language,Content-Language,Content-Type'

  HTTPSConnector:
    #ListenerPort: 0                 # Set non-zero to set a specific port, defaults to 7843
    #ListenerAddress: '0.0.0.0'      # Set the IP address for the listener to listen on. Default is to listen on all addresses
    #ReqClientAuth: true
    #KeyAlias: ''
    #KeyPassword: 'P4s5w0rd'         # Set the password or alias to the password of the key
    #KeystoreFile: '/path/to/keystore.jks'
    #KeystorePassword: 'P4s5w0rd'    # Set the password or alias to the password of the keystore
    #KeystoreType: 'JKS'             # Set the keystore type, can be 'JKS' or 'p12'. Default is JKS.
    #TruststoreFile: /path/tp/truststore.jks
    #TruststorePassword: 'P4s5w0rd'  # Set the password or alias to the password of the keystore
    #TruststoreType: 'JKS'           # Set the truststore type, can be 'JKS' or 'p12'. Default is JKS.
    #CORSEnabled: false   # Set the value to true to make the listener respond to valid HTTP CORS requests
    #CORSAllowOrigins: '*'
    #CORSAllowCredentials: false
    #CORSExposeHeaders: 'Content-Type'
    #CORSMaxAge: -1
    #CORSAllowMethods: 'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS'
    #CORSAllowHeaders: 'Accept,Accept-Language,Content-Language,Content-Type'
    #EnableTLSTrace: false           # Enables tracing of TLS handshake messages to the console

  ActivityLogManager:
    #activityLogEnabled: true
    #defaultLogSizePerThread: 1000
    #minSeverityLevel: 'INFO'        # choose one of INFO|WARN|ERROR

  DatabaseConnectionManager:
    #maxConnectionAge: 60                       # Set to -1 to never release connections
    #useDefaultSchemaForStoredProcedures: true

  SocketConnectionManager:
    #allowedAuthTypes: 'platform default'   # Sets the allowable authentication mechanisms when responding to a HTTP 401 response during a HTTP based request.
                                            # Multiple values can be specified and should be semi-colon separated.
                                            # Valid values are 'basic', 'ntlm', 'negotiate', 'nego2', 'all', 'iwa', 'platform default'.
                                            # Unix only supports 'basic'. Windows supports all values.
                                            # 'platform default' is expanded to "basic" on unix and "basic; ntlm; negotiate; nego2" on windows.
                                            # 'iwa' is expanded to mean "ntlm; negotiate; nego2"
    #allowNtlmNegotiation: true   # Set to 'false' to prevent NTLM from being negotiated with the SPNEGO and SPNEGO-2 protocols.
    #negotiateMutualAuth: false   # Set to 'true' if you require mutual authentication when the Kerberos protocol is negotiated.
    #preemptiveAuthType: ''  # Configure the authentication mechanism to use preemptively when making a HTTP based request.
                             # Valid values are '', 'basic', 'ntlm', 'negotiate', 'nego2'.
                             # Set to the default value of '' to disable preemptive authentication.
    #tcpNoDelay: true     # Set to 'false' to disable the tcpnodelay setting for non-SSL sockets created for HTTP based requests.
    #tcpNoDelaySSL: true  # Set to 'false' to disable the tcpnodelay setting for SSL sockets created for HTTP based requests.

  ContentBasedFiltering:
    #cbfEnabled: false     # Set to true to enable content-based filtering
    #evaluationThreads: 1  # Configures the number of evaluation threads available for content-based filtering
    #validationThreads: 1  # Configured the number of validation threads available for content-based filtering

  FTEAgent:
    #coordinationQMgr: '' # Set to the name of the coordination Queue Manager to be used by the embedded FTE Agent if not using the default Queue Manager as the coordination Queue Manager.

  ParserManager:
    #parserWarningThreshold: 1000   # Sets the frequency, based on parsers per thread, with which a parser creation warning message is written to activity log
    #fieldWarningThreshold: 100000  # Sets the frequency, based on fields per parser, with which a field creation warning message is written to activity log
    #freeMasterParsers: false       # Sets whether parsers will be freed after each input message has been processed.

  ESQL:
    #castWithAccurateZoneOffsets: false       # Set ESQL to use the time zones that are stored with Time, Timestamp, and Date data types when you cast to and from GMTTime and GMTTimestamp data types.
    #alwaysCastToLocal: true                  # Set ESQL to convert the specified time into the local time zone of the integration node/server when a String is cast to a Time or TimeStamp with a Format.
    #useICUStringManipulation: false          # Set ESQL to provide full support for UTF-16 surrogate pairs.
    #allowPropagateWithSharedLockHeld: false  # Set ESQL to propagate the message even if a lock is held on a shared variable.
    #performanceStatsReportingOn: false       # Set ESQL to capture performance statistics
    #performanceStatsOutputPath: ''           # Sets the path that ESQL performance statistics are captured to

  XMLNSC:
    #invalidCharacterEscapeType: none  # Sets the way XMLNSC serialization renders characters that do not exist in the target code page. Choose one of none|hex|decimal|unicode
                                       # The value of none will throw an exception for an invalid character.
                                       # Choosing hex|decimal|unicode will write the character either in hex, decimal or unicode character entity format.
    #storeTimeZoneInValue: true        # Sets XMLNSC parsers to store timezone information as part of the Datetime value that is parsed.
    #writeTimeZone: whenSet            # Sets XMLNSC parsers to write timezone information when an XML document is serialized. Choose one of never|whenSet|nonUTC|nonLocal|always
                                       # When the value of never is set timezones will not be written in the XML document.
                                       # When the value of always is set timezones will always be written where the local timezone will be used if required.
                                       # whenSet can be used to only write timezones if they were parsed from an XMLNSC message
                                       # The values of nonUTC and nonLocal can be used to avoid writing timezones for local or UTC timezones.
    #cdataFieldMerging: false          # Sets XMLNSC parsers to represent CDATA sections in one message tree field.

  JSON:
    #escapeMode: strict  # Specifies whether the JSON parser escapes forward slash characters when it is serializing a message tree. Choose one of preserveForwardSlashes|strict.
                         # To specify that the JSON parser must leave forward slashes unchanged in the output, set the value to preserveForwardSlashes.

  MQConnectionManager:
    #enableBrowseForAllInputQueues: false  # Sets the MQOO_BROWSE open option when all input queues are opened.
    #expiryCompensation: false             # Set to true to reduce the MQOutput MQPUT MQMD.Expiry by the amount of message flow processing time.
    #useIsolatedBindings: false            # Sets the MQCNO_ISOLATED_BINDING connection option when the MQ connection is created.
    #queueCacheMaxSize: 10                 # Sets the maximum number of a queue handles that a message flow thread can maintain.
    #queueCacheTimeout: 300                # Sets the time (in seconds) that a freed queue handle will stay cached until it removed from the cache.
    #queueMaxTimeout: 60                   # Sets the maximum time (in seconds) that an MQ handle is idle before it is considered for closing.

  XPathCache:
    #minimumSize: 6000            # controls the minimum number of compiled XPath expressions that can be stored in the XPath cache.
    #maximumSize: 10000           # controls the maximum number of compiled XPath expressions that can be stored in the XPath cache
    #entryWarningThreshold: 1000  # controls how frequently activity log messages are emitted by the XPath cache as it grows in size.
    #mode: true                   # Set to false to disable XPath caching

  AsyncHandleManager:
    #asyncHandleTimeoutSeconds: -1  # Sets the expiry time (in seconds) when the reply identifiers expire for asynchronous handles used for HTTP, SOAP, SAP and Callable flow nodes.

  GlobalCache:
    #cacheOn: false                     # Set to true to enable Global Cache functionality
                                        # When using Global Cache it is advisable to change your jvmMinHeapSize and jvmMaxHeapSize depending on
                                        # the number of live objects in the heap, complexity of live objects in the heap and number of available cores.
                                        # see https://www.ibm.com/support/knowledgecenter/SSTVLU_8.6.0/com.ibm.websphere.extremescale.doc/cxsjvmtune.html
    #cacheServerName: ''                # The name of this cache server component (a cache server component can be a catalog and/or a container); it must be unique in your global cache system
    #catalogServiceEndPoints: ''        # Comma-separated list of hostnames and ports for the catalog servers to use, e.g. 'localhost:2800'
    #catalogDomainName: ''              # Name of the shared global cache domain; this value should be shared by all catalog servers in the same domain, e.g. 'WMB_MyCacheDomain'
    #catalogClusterEndPoints: ''        # Comma-separated list of catalog server connection details in the format 'cacheServerName:catalogCacheServerHost:HAPort:clientPort'
                                        # If this is a catalog server, cacheServerName should match the value above, and if not, it will be the value used on the integration server hosting it
                                        # The list should be in the same order for all catalog and container servers which are interacting together in the same domain
    #clientsDefaultToSSL: false         # Set to true to enable SSL for any client connections to the cache servers
    #deploymentPolicyCustomFile: ''     # Override the deployment policy file (default is '<install directory>/server/cachesupport/config/deployment.xml')
    #enableCatalogService: false        # Set to true to launch a catalog service cache server component in this integration server
    #enableContainerService: false      # Set to true to launch a container service cache server component in this integration server
    #enableJMX: true                    # Allow admin access to this container service via JMX
    #listenerHost: ''                   # Comma-separated list of hostnames for this cacheServer component, e.g. 'localhost,myserver.mycompany.com'
    #listenerPort: 0                    # Port number this cache server listens on; it must be unique on this machine
                                        # Four consecutive ports are assigned, e.g. 2800 for catalogCacheServerListenerPort, 2801 for clientPort, 2802 for JMXServicePort, 2803 for HAPort
    #objectGridCustomFile: ''           # Override the ObjectGrid file (default is '<install directory>/server/cachesupport/config/objectgrid_xio.xml')
    #overrideTraceSpec: ''              # Set a trace level for the cache server components, e.g. ObjectGrid*=event=enabled
    #sslAlias: ''                       # SSL Alias to use for the cache server components
    #sslProtocol: ''                    # SSL Protocol to use for SSL connections eg. default is "TLSv1.2"

  ExceptionLog:
    #enabled: false                     # Enables logging of exceptions to <workdir>/config/common/log/integration_server.<name>.exceptionLog.txt
    #includeFlowThreadReporter: false   # Toggles whether exception in the exception log include a flow stack and history from the flow thread reporter
    #showNestedExceptionDetails: false  # Toggles whether nested exceptions are shown by default in the exception log

ConnectorProviders:
  SAPConnectorProvider:
    #jarsURL: 'default_Path'     # Set to the absolute path containing the SAP JCo JARs.
    #nativeLibs: 'default_Path'  # Set to the absolute path containing the SAP JCo libraries.
  SiebelConnectorProvider:
    #jarsURL: 'default_Path'     # Set to the absolute path containing the Siebel JARs.
    #nativeLibs: 'default_Path'  # Set to the absolute path containing the Siebel libraries.
    #siebelPropertiesURL:  ''  # Set to the location of the siebel.properties file.
  PeopleSoftConnectorProvider:
    #jarsURL: 'default_Path'     # Set to the absolute path containing the PeopleSoft JARs.
  JDEdwardsConnectorProvider:
    #jarsURL: 'default_Path'     # Set to the absolute path containing the JDEdwards JARs.
    #nativeLibs: 'default_Path'  # Set to the absolute path containing the JDEdwards libraries.

#  MyCustomProvider:
#    connectorClassName: 'com.company.connector.hyper.LoopConnectorFactory'
#    jarsURL: 'installation_directory/runtime/LoopConnector' # absolute path
#    nativeLibs: 'default_Path' # absolute path or special value "default_Path"

# Record and Replay requires a default queue manager to be associated with the integration server.
RecordReplay:
  #recordReplayEnabled: true           # Set to true to enable all Record and Replay functionality. Default is true.
  Stores:
    # Copy and customize the StoreTemplate section for each Record and Replay store that you want to create.
    # Rename the section title 'StoreTemplate' to be the name of your Record and Replay store. This name must be unique.
    #StoreTemplate:
      #dataSource: ''                    # The ODBC data source name (DSN) that is used to connect to the database that stores the recorded data. This property is mandatory and has no default value.
      #schema: ''                        # The schema name that owns the database tables that are used for storing recorded data. This property has no default value. If no value is set, either the default database schema is used (if there is one), or no schema is used, depending on the database.
      #storeMode: 'all'                  # The mode for the store to operate in. Valid values are record, view, and all. Default is all.
      #queue: 'SYSTEM.BROKER.DC.RECORD'  # The name of the queue to which event messages will be published before being recorded to the database. The queue must exist.
                                         # Default is SYSTEM.BROKER.DC.RECORD. The queue SYSTEM.BROKER.DC.RECORD must be created manually if you use Record and Replay. The same queue can be specified for multiple Record and Replay stores.
                                         # Change the value of this property to distribute the data from multiple sources across multiple queues.
      #backoutQueue: 'SYSTEM.BROKER.DC.BACKOUT'  # The name of the backout queue used by the recorder. Messages that cannot be processed (for example, because the specified database does not exist) are sent to this queue.
                                                 # Default is SYSTEM.BROKER.DC.BACKOUT. The queue SYSTEM.BROKER.DC.BACKOUT must be created manually if you use Record and Replay. If a data capture source refers to this data capture store, and no backoutQueue has been specified, an error occurs. The same backoutQueue can be specified for multiple Record and Replay stores.
      #useCoordinatedTransaction: false  # Specifies whether recorder transactions are globally coordinated across IBM MQ and database resources. Default is false.
      #commitCount: 10                   # The number of input messages that are processed on a recorder thread before a sync point is taken. Default is 10.
      #threadPoolSize: 10                # The number of threads that are used by the recorder to process the monitoring topic subscriptions. Default is 10.
      #commitIntervalSecs: 5             # The time interval (in seconds) at which a commit is taken, if the commitCount property is greater than 1 but the number of messages processed has not reached the value of the commitCount property. Default is 5.

  Sources:
    # Copy and customize the SourceTemplate section for each Record and Replay source that you want to create.
    # Rename the section title 'SourceTemplate' to be the name of your Record and Replay source. This name must be unique.
    # If you are publishing MonitoringEventV2 format monitoring events, the value of the topic property takes the form: $SYS/Broker/integrationNodeName/Monitoring/integrationServer/application/library/msgFlow ,where integrationNodeName, integrationServer, application, library, and msgFlow represent the names of your integration node, integration server, application, library, and message flow. The library name is optional and will be required only if the message flow is inside a library.
    # If you are publishing WMB format monitoring events, the value of the topic property takes the form: $SYS/Broker/integrationNodeName/Monitoring/integrationServer/msgFlow, where integrationNodeName, integrationServer, and msgFlow represent the names of your integration node, integration server, and message flow.
    # You can use wildcards in the topic string; for more information about using wildcards in topics, see "Special characters in topics" topic in the Knowledge Center.
    # A durable subscription is created for each source and is created with a subid of IntegrationServer:[servername]:[sourcename]. If multiple independent integration servers share the same queue manager, you must ensure that there is no clash in server and source name.
    # If you delete a source, you must manually delete the durable subscription for that source to avoid messages being published to the Record and Replay store's queue.
    #SourceTemplate:
      #topic: '$SYS/Broker/[nodename]/Monitoring/[servername]/[applicationname]/[flowname]'  # Sets the subscription topic that is used for business-level monitoring of a message flow.
      #store: 'StoreTemplate' # The Record and Replay store that is used to configure record and replay for the message flows specified in the topic property. Multiple instances of Record and Replay source can refer to one instance of a Record and Replay store.

  Destinations:
    # Copy and customize the MQDestinationTemplate section for each Record and Replay destination that you want to create.
    # Rename the section title 'MQDestinationTemplate' to be the name of your Record and Replay destination. This name must be unique.
    # For destinations of type WMQDestination, the value of the property takes the form: wmq:/msg/queue/queueName@queueManagerName, where queueName identifies the destination queue and queueManagerName identifies the queue manager that owns the queue. The queue manager specified by this property must be local; data cannot be replayed to a queue that is on a remote queue manager.
    #MQDestinationTemplate:
      #endpointType: 'WMQDestination'             # The type of the target destination to which messages will be replayed. The default is WMQDestination, which is the only valid value.
      #endpoint: 'wmq:/msg/queue/[QUEUE]@[QMGR]'  # The destination to which you want to replay data. This property is mandatory. The default value is wmq:/msg/queue/[QUEUE]@[QMGR]. You must replace [QUEUE] and [QMGR] with the names of your queue and queue manager.


UserVariables:
  #Thing1: 'value'
  type: serverconf
